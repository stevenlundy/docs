{
  "crystal-hello": {
    ".dockerignore": "*\n!main.cr\n",
    ".gitignore": "main\nmain.dwarf\n",
    "main.cr": "require \"http/server\"\n\nserver = HTTP::Server.new do |context|\n  context.response.content_type = \"text/plain\"\n  context.response.print \"Hello world! The time is #{Time.now}\"\nend\n\naddress = server.bind_tcp \"0.0.0.0\", 3000\nputs \"Listening on http://#{address}\"\nserver.listen\n",
    "Dockerfile": "FROM alpine:edge as base\nWORKDIR /usr/src\nRUN apk add --no-cache crystal libressl-dev libc-dev zlib-dev\nCOPY . .\nRUN crystal build --release --static main.cr\n\nFROM scratch\nCOPY --from=base /usr/src/main /crystal-http-microservice\nCMD [\"/crystal-http-microservice\"]\n",
    "README.md": "# crystal-hello\n\nIn this project we will be building and deploying a Hello World example using [Crystal Lang](https://crystal-lang.org/)\n\n### Getting started with Crystal\n\n#### Create a new folder with the name of your app\n\n```\nmkdir my-app && cd my-app\n```\n\n#### Create a main.cr file\n\n```\ntouch main.cr\n```\n\nFor this example we will use the minimal requirements to run a Hello World.\n\n```\nrequire \"http/server\"\n\nserver = HTTP::Server.new do |context|\n  context.response.content_type = \"text/plain\"\n  context.response.print \"Hello world! The time is #{Time.now}\"\nend\n\naddress = server.bind_tcp \"0.0.0.0\", 3000\nputs \"Listening on http://#{address}\"\nserver.listen\n```\n\n### Adding Dockerfile for libmicrohttpd\n\n#### Instructions\n\nWe will create a `Dockerfile` with multi stage builds to:\n\n- Install all the dependencies\n- Build the application for production\n- Remove non-production dependencies\n- Create a new lighter Docker image to reduce boot time\n- Pull built files and production dependencies from previous steps\n\n#### Dockerfile\n\nWe will start buy using the official Alpine Docker image to install the dependencies and build the project, after that we will use the official scratch Docker image to have the minimum requirements and lower the Docker image size to run the app and copy all the files.\n\nThen using the Docker `CMD` we will start the app in production mode.\n\n```\nFROM alpine:edge as base\nWORKDIR /usr/src\nRUN apk add --no-cache crystal libressl-dev libc-dev zlib-dev\nCOPY . .\nRUN crystal build --release --static main.cr\n\nFROM scratch\nCOPY --from=base /usr/src/main /crystal-http-microservice\nCMD [\"/crystal-http-microservice\"]\n```\n\n#### Add a .dockerignore\n\nWe can tell to Docker which files should only be required for building the project using an `.dockerignore` file.\n\n```\ntouch .dockerignore\n```\n\nFor this project we only need the main.cr.\n\n```\n*\n!main.cr\n```\n\n### Deploy with Now\n\nFirst we need to add a `now.json` file to specify we want to use our Cloud V2.\n\n```\ntouch now.json\n```\n\nBy just adding the features key, we can specify the Now cloud to use.\n\n```\n{\n  \"features\": {\n    \"cloud\": \"v2\"\n  }\n}\n```\n\nWe are now ready to deploy the app.\n\n```\nnow\n```",
    "now.json": "{\n  \"public\": true,\n  \"features\": {\n    \"cloud\": \"v2\"\n  }\n}\n"
  },
  "go-hello": {
    ".dockerignore": "*\n!main.go\n",
    "Dockerfile": "FROM golang:1.9-alpine as base\nWORKDIR /usr/src\nCOPY . .\nRUN CGO_ENABLED=0 go build -ldflags \"-s -w\" -o main\n\nFROM scratch\nCOPY --from=base /usr/src/main /go-http-microservice\nCMD [\"/go-http-microservice\"]\n",
    "README.md": "# go-hello\n\nIn this project we will be building and deploying a Hello World example using [Go](https://golang.org/).\n\nGo is an open source programming language that makes it easy to build simple, reliable, and efficient software.\n\n### Getting started with Go\n\n#### Create a new folder with the name of your app\n\n```\nmkdir my-app && cd my-app\n```\n\n#### Create a main.go file\n\n```\ntouch main.go\n```\n\nFor this example we will use the minimal requirements to run a Hello World.\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello from Go\")\n\t})\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n### Adding Dockerfile for Go\n\n#### Instructions\n\nWe will create a `Dockerfile` with multi stage builds to:\n\n- Install all the dependencies\n- Build the application for production\n- Remove non-production dependencies\n- Create a new lighter Docker image to reduce boot time\n- Pull built files and production dependencies from previous steps\n\n#### Dockerfile\n\nWe will start buy using the official Go Docker image to install the dependencies and build the project, after that we will use the official scratch Docker image to have the minimum requirements and lower the Docker image size to run the app and copy all the files.\n\nThen using the Docker `CMD` we will start the app in production mode.\n\n```\nFROM golang:1.9-alpine as base\nWORKDIR /usr/src\nCOPY . .\nRUN CGO_ENABLED=0 go build -ldflags \"-s -w\" -o main\n\nFROM scratch\nCOPY --from=base /usr/src/main /go-http-microservice\nCMD [\"/go-http-microservice\"]\n```\n\n#### Add a .dockerignore\n\nWe can tell to Docker which files should only be required for building the project using an `.dockerignore` file.\n\n```\ntouch .dockerignore\n```\n\nFor this project we only need the main.go.\n\n```\n*\n!main.go\n```\n\n### Deploy with Now\n\nFirst we need to add a `now.json` file to specify we want to use our Cloud V2.\n\n```\ntouch now.json\n```\n\nBy just adding the features key, we can specify the Now cloud to use.\n\n```\n{\n  \"features\": {\n    \"cloud\": \"v2\"\n  }\n}\n```\n\nWe are now ready to deploy the app.\n\n```\nnow\n```",
    "main.go": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello from Go\")\n\t})\n\thttp.ListenAndServe(\":3000\", nil)\n}\n",
    "now.json": "{\n  \"public\": true,\n  \"features\": {\n    \"cloud\": \"v2\"\n  }\n}\n"
  },
  "node-micro": {
    ".dockerignore": "*\n!server.js\n!package.json\n!yarn.lock\n",
    "Dockerfile": "FROM mhart/alpine-node:10 as base\nWORKDIR /usr/src\nCOPY package.json yarn.lock /usr/src/\nRUN yarn --production\nCOPY . .\n\nFROM mhart/alpine-node:base-10\nWORKDIR /usr/src\nENV NODE_ENV=\"production\"\nCOPY --from=base /usr/src .\nCMD [\"node\", \"./node_modules/.bin/micro\"]\n",
    "now.json": "{\n  \"public\": true,\n  \"type\": \"docker\",\n  \"features\": {\n    \"cloud\": \"v2\"\n  }\n}\n",
    "readme.md": "# node-micro\n\nA simple Node.js microservice that exposes a simple function.\n\nTo edit your function, refer to `./src/index.js`.\n\nOptimized image that combines:\n\n- `yarn` for installing dependencies\n- `micro` as a lightweight HTTP server\n\nfor the highest build-time performance, smallest resulting artifact size\nand fast bootup time.\n",
    "package.json": "{\n  \"name\": \"node-micro\",\n  \"dependencies\": {\n    \"micro\": \"9.3.1\"\n  },\n  \"license\": \"MIT\",\n  \"main\": \"./server.js\"\n}\n",
    "server.js": "module.exports = () => \"Hello from Micro!\";\n",
    "yarn.lock": "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\nansi-styles@^3.2.1:\n  version \"3.2.1\"\n  resolved \"https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d\"\n  dependencies:\n    color-convert \"^1.9.0\"\n\narg@2.0.0:\n  version \"2.0.0\"\n  resolved \"https://registry.yarnpkg.com/arg/-/arg-2.0.0.tgz#c06e7ff69ab05b3a4a03ebe0407fac4cba657545\"\n\nbytes@3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/bytes/-/bytes-3.0.0.tgz#d32815404d689699f85a4ea4fa8755dd13a96048\"\n\nchalk@2.4.0:\n  version \"2.4.0\"\n  resolved \"https://registry.yarnpkg.com/chalk/-/chalk-2.4.0.tgz#a060a297a6b57e15b61ca63ce84995daa0fe6e52\"\n  dependencies:\n    ansi-styles \"^3.2.1\"\n    escape-string-regexp \"^1.0.5\"\n    supports-color \"^5.3.0\"\n\ncolor-convert@^1.9.0:\n  version \"1.9.1\"\n  resolved \"https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.1.tgz#c1261107aeb2f294ebffec9ed9ecad529a6097ed\"\n  dependencies:\n    color-name \"^1.1.1\"\n\ncolor-name@^1.1.1:\n  version \"1.1.3\"\n  resolved \"https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25\"\n\ncontent-type@1.0.4:\n  version \"1.0.4\"\n  resolved \"https://registry.yarnpkg.com/content-type/-/content-type-1.0.4.tgz#e138cc75e040c727b1966fe5e5f8c9aee256fe3b\"\n\ndepd@1.1.1:\n  version \"1.1.1\"\n  resolved \"https://registry.yarnpkg.com/depd/-/depd-1.1.1.tgz#5783b4e1c459f06fa5ca27f991f3d06e7a310359\"\n\nescape-string-regexp@^1.0.5:\n  version \"1.0.5\"\n  resolved \"https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4\"\n\nhas-flag@^3.0.0:\n  version \"3.0.0\"\n  resolved \"https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd\"\n\nhttp-errors@1.6.2:\n  version \"1.6.2\"\n  resolved \"https://registry.yarnpkg.com/http-errors/-/http-errors-1.6.2.tgz#0a002cc85707192a7e7946ceedc11155f60ec736\"\n  dependencies:\n    depd \"1.1.1\"\n    inherits \"2.0.3\"\n    setprototypeof \"1.0.3\"\n    statuses \">= 1.3.1 < 2\"\n\niconv-lite@0.4.19:\n  version \"0.4.19\"\n  resolved \"https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.19.tgz#f7468f60135f5e5dad3399c0a81be9a1603a082b\"\n\ninherits@2.0.3:\n  version \"2.0.3\"\n  resolved \"https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de\"\n\nis-stream@1.1.0:\n  version \"1.1.0\"\n  resolved \"https://registry.yarnpkg.com/is-stream/-/is-stream-1.1.0.tgz#12d4a3dd4e68e0b79ceb8dbc84173ae80d91ca44\"\n\nmicro@9.3.1:\n  version \"9.3.1\"\n  resolved \"https://registry.yarnpkg.com/micro/-/micro-9.3.1.tgz#0c37eba0171554b1beccda5215ff8ea4e7aa59d6\"\n  dependencies:\n    arg \"2.0.0\"\n    chalk \"2.4.0\"\n    content-type \"1.0.4\"\n    is-stream \"1.1.0\"\n    raw-body \"2.3.2\"\n\nraw-body@2.3.2:\n  version \"2.3.2\"\n  resolved \"https://registry.yarnpkg.com/raw-body/-/raw-body-2.3.2.tgz#bcd60c77d3eb93cde0050295c3f379389bc88f89\"\n  dependencies:\n    bytes \"3.0.0\"\n    http-errors \"1.6.2\"\n    iconv-lite \"0.4.19\"\n    unpipe \"1.0.0\"\n\nsetprototypeof@1.0.3:\n  version \"1.0.3\"\n  resolved \"https://registry.yarnpkg.com/setprototypeof/-/setprototypeof-1.0.3.tgz#66567e37043eeb4f04d91bd658c0cbefb55b8e04\"\n\n\"statuses@>= 1.3.1 < 2\":\n  version \"1.3.1\"\n  resolved \"https://registry.yarnpkg.com/statuses/-/statuses-1.3.1.tgz#faf51b9eb74aaef3b3acf4ad5f61abf24cb7b93e\"\n\nsupports-color@^5.3.0:\n  version \"5.4.0\"\n  resolved \"https://registry.yarnpkg.com/supports-color/-/supports-color-5.4.0.tgz#1c6b337402c2137605efe19f10fec390f6faab54\"\n  dependencies:\n    has-flag \"^3.0.0\"\n\nunpipe@1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/unpipe/-/unpipe-1.0.0.tgz#b2bf4ee8514aae6165b4817829d21b2ef49904ec\"\n"
  }
}
